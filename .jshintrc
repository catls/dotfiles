{
    // 強制オプション:これらを設定すると、警告が増える。
    /*ビット演算子の使用禁止。ビット演算子は^や｜など。ビット演算子はJavaScriptではとても稀であって、&はたいてい&&の単なる書き間違いである。*/
    "bitwise":false,
    /* キャメルケース (camelCase)、もしくはアンダースコア付きアッパーケース (UPPER_CASE) の使用強制 */
    "camelcase":false,
    /* 波括弧の強制。JavaScriptでは中身が一文の場合は波括弧の省略が可能。しかしながら、バグを導きかねない。 */
    "curly":false,
    /* 同値演算子=== !==に替えての等値演算子== !=の使用を禁止 */
    "eqeqeq":false,
    /* ECMAScript 3の仕様に準拠する必要がある場合に設定 IE 6/7/8/9 などのレガシーな実行環境に対応する必要がある場合に使用する。 */
    "es5":false,
    /* for in ループ内でのプロパティチェックを強制
     * for in ループ内で、ループさせるオブジェクトのプロパティについて、hasOwnProperty()を使ってフィルターすることを必須とする。
     * for inループではプロトタイプチェーンで継承したプロパティ名も回すので、意図しないプロパティが渡されるおそれがあるため。*/
    "forin":false,
    /* 即時関数の括弧強制
     * 即時関数を括弧で囲むことで、その記述が関数そのものではなく関数の結果が与えられるのだということを読み手が理解できる。 */
    "immed":false,
    /* タブインデントの強制 */
    "indent":false,
    /* 定義前変数の使用禁止
     * JavaScriptでは関数内のスコープしかなく、
     * 変数は（関数内のどこで定義しても）関数内の先頭で巻き上げられるが、
     * 変数はいつも定義したあとに使用する方が安全である。*/
    "latedef":false,
    /* コンストラクタ関数の先頭大文字強制 */
    "newcap":false,
    /* arguments.callerおよびarguments.calleeの使用禁止
     * どちらも将来的なバージョンでは非推奨。ECMAScript5のstrict mode では禁止されている。 */
    "noarg":true,
    /* 空ブロックの警告
     * JSHintではもともと空ブロックに警告を出していたが、オプションとした。
     * 空ブロックがあるためにコードの実行が停止されてしまうという報告はない。*/
    "noempty":true,
    /* 代入しないコンストラクタ関数の使用禁止
     * new演算子で呼び出したコンストラクタ関数の返り値を変数に代入しない使い方がある。
     * new MyConstructor();
     * しかし、どこにも使われないのにnewで呼び出す必要はなく、単純にコンストラクタ関数を実行すればいい。*/
    "nonew":true,
    /* インクリメント演算子++、デクリメント演算子--の使用禁止 */
    "plusplus":false,
    /* クオテーション統一
     * 設定値は３種類。
     * "single" : シングルクオテーションに統一
     * "double" : ダブルクオテーションに統一
     * true : いずれかのクオテーションに統一
     */
    "quotmark":false,
    /* 宣言していない変数の使用禁止 */
    "undef":false,
    /* 使用していない変数について警告する */
    "unused":false,
    /* ECMAScript5 の strict mode 強制 */
    "strict":false,
    /* 行末の余分な空白エラー */
    "trailing":true,
    /* 関数の引数の最大数を指定 */
    "maxparams":false,
    /* 入れ子の深さの最大値を指定 */
    "maxdepth":false,
    /* 関数内の文の最大数を指定 */
    "maxstatements":false,
    /* 循環的複雑度の最大値を指定
     * プログラムソースコードの線形的に独立した経路の数を数える。詳しくはWikipedia 循環的複雑度 */
    "maxcomplexity":false,
    /* 一行の最大の長さを指定 */
    "maxlen":false,

    /*
     * 緩和オプション
     * 
     * これらのオプションで警告を減らせる
     */
    /* セミコロンの付け忘れについての警告停止 */
    "asi":true,
    /* 比較演算子==の代入演算子=への書き間違えについての警告停止
    よくあるのは、if( a = 10 ) {}みたいなコードだ。ただし、このような書き方は以下のような場合には有用である。
    for (var i = 0, person; person = people[i]; i++) {}
    以下のように、括弧で囲ってやることでエラーを避けることができる。
    for (var i = 0, person; (person = people[i]); i++) {} */
    "boss":true,
    /* debugger文についての警告停止 */
    "debug":true,
    /* == nullについての警告停止
     * このような比較の仕方は、変数がnullかundefinedであるかどうかをチェックするときには有用。*/
    "eqnull":true,
    /* ECMAScript6仕様の構文を使用しているときに設定
    ただし、最終決定されていないので、全てのブラウザで対応しているわけではないことに注意。*/
    "esnext":true,
    /* evalの使用についての警告停止 */
    "evil":true,
    /* 式の中での代入もしくは関数呼出しについての警告停止
    * 大抵の場合は誤記であるが、仕様としては禁止されておらず、そのためこの警告はオプションである。*/
    "expr":true,
    /* 外側からアクセス可能な構造内部での変数宣言についての警告停止
     * JavaScrptにはグローバルと関数の2つのスコープしかないが、このことは新規習得者にとっての混乱と見つけづらいバグをもたらす。
     * そのため、JSHintでは意図したであろうスコープ外で使われる変数について、（初期設定で）警告を出すようにしている。*/
    "funcscope":true,
    /* グローバルでのstrict mode使用についての警告停止
    グローバルでのstrict modeは、サードパーティ製のウィジェットを機能停止にしてしまうおそれがあるので、非推奨である。 */
    "globalstrict":true,
    /* __iterator__プロパティについての警告停止
    このプロパティは全てのブラウザでサポートされているわけではないので、使用には注意を要する。*/
    "iterator":true,
    /* 一行の最後の文でのセミコロン忘れを除き、セミコロン漏れの警告停止
    var name = (function() { return 'Anton' }());
    自動コード生成機能を使うときに有効な、ニッチな場合である。*/
    "lastsemic":true,
    /* 安全とは言えない改行についての警告停止
    ただし行頭カンマのコーディングスタイルについての警告は停止しない。それは次のlaxcommaを使用のこと。*/
    "laxbreak":true,
    /* 行頭カンマについての警告停止 */
    "laxcomma":true,
    /* ループ内関数についての警告停止 */
    "loopfunc":true,
    /* 複数行文字列についての警告停止
    複数行文字列は、エスケープ文字と次の行との間に誤ってスペースを挿入したりするととても混乱するので危険である。*/
    "multistr":true,
    /* __proto__`プロパティについての警告停止 */
    "proto":true,
    /* スクリプト向けURL（こんなのjavascript:...）の使用についての警告停止 */
    "scripturl":true,
    /* タブとスペースの混在についての警告停止 */
    "smarttabs":true,
    /* 変数隠しについての警告停止
    外のスコープですでに宣言されている変数を宣言することで、変数を隠すことができる。*/
    "shadow":true,
    /* ドット演算子で記述可能な箇所でのブラケット演算子[]の使用についての警告停止 */
    "sub":true,
    /* 「幽霊 (wierd)」コンストラクタについての警告停止
    new function () { ... }とかnew Object;のこと。*/
    "supernew":true,
    /* strict mode時のコンストラクタでない関数でthisを使用するという厳密には違反になるコードについての警告停止 */
    "validthis":true,

    /* 環境に関するオプション */
    "browser":true, // モダンブラウザ指定
    "couch":true, // CouchDB指定
    "devel":true, // consoleやalertなどのデバッグ用ログの使用を指定。たとえば、古いIEではconsole.logがエラーを起こすので、製品版ではこれらを使わないのが良いだろう。
    "dojo":true, // Dojo Toolkit指定
    "jquery":true, // jQueryライブラリ使用指定
    "mootools":true, // Mootoolsフレームワーク使用指定
    "node":true, // Node環境での実行指定
    "nonstandard":true, // 非標準指定 escapeやunescapeなどのグローバル関数が採用されていない。
    "phantom":true, // PhantomJS環境での実行指定
    "prototypejs":true, // Prototypeフレームワーク使用指定
    "rhino":true, // Rhino環境での実行指定
    "worker":true, // Web Worker環境での実行指定
    "wsh":true, // Windows Script Hostでの実行指定
    "yui":true // YUIフレームワーク使用指定
    //"-W100": false,     // Silently deleted characters (in locales) .ではなく[]の使用を許可
}
